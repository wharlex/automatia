version: "3.9"
services:
  app:
    build:
      context: ..
      dockerfile: ops/Dockerfile
    env_file: ./.env.production
    depends_on: [postgres, redis]
    networks: [web]
    restart: always
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/api/healthz"]
      interval: 15s
      timeout: 5s
      retries: 10

  worker:
    build:
      context: ..
      dockerfile: ops/Dockerfile.worker
    env_file: ./.env.production
    depends_on: [redis, postgres]
    networks: [web]
    restart: always

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_DB: ${PGDATABASE}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [web]
    restart: always

  redis:
    image: redis:7-alpine
    command: ["redis-server","--save","60","1","--loglevel","warning"]
    volumes: [ "redisdata:/data" ]
    networks: [web]
    restart: always

  nginx:
    image: nginx:1.27-alpine
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - certs:/etc/letsencrypt:ro
    depends_on: [app]
    ports:
      - "80:80"
      - "443:443"
    networks: [web]
    restart: always

  certbot:
    image: certbot/certbot:v2.11.0
    volumes:
      - certs:/etc/letsencrypt
      - webroot:/var/www/certbot
    command: ["sh","-c","trap exit TERM; while :; do certbot renew --webroot -w /var/www/certbot --agree-tos; sleep 12h & wait $!; done"]
    networks: [web]
    restart: always

volumes:
  pgdata:
  redisdata:
  certs:
  webroot:

networks:
  web:
